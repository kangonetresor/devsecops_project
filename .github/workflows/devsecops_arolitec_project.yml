name: OWASP ZAP Dynamic Scan

on:
  push:
  pull_request:

jobs:
  zap-scan:
    runs-on: ubuntu-latest

    steps:
    # 1. Récupérer le code
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Détection du type de projet (Python ou JS)
    - name: Detect project type
      id: detect
      run: |
        if [ -f "package.json" ]; then
          echo "lang=js" >> $GITHUB_ENV
          echo "port=3000" >> $GITHUB_ENV
        elif [ -f "requirements.txt" ]; then
          echo "lang=python" >> $GITHUB_ENV
          echo "port=5000" >> $GITHUB_ENV
        else
          echo "Impossible de détecter le langage."
          exit 1
        fi

    # 3. Setup Node.js si JavaScript détecté
    - name: Set up Node.js
      if: env.lang == 'js'
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # 4. Setup Python si Python détecté
    - name: Set up Python
      if: env.lang == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # 5. Installation des dépendances
    - name: Install dependencies
      run: |
        if [ "$lang" = "js" ]; then
          npm install
        elif [ "$lang" = "python" ]; then
          pip install -r requirements.txt
        fi

    # 6. Lancer l'application en arrière-plan
    - name: Start application
      run: |
        if [ "$lang" = "js" ]; then
          nohup npm start &
        elif [ "$lang" = "python" ]; then
          nohup python app.py &
        fi
        sleep 15

    # 7. Lancer le scan OWASP ZAP
    - name: Run OWASP ZAP Scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: "http://localhost:${{ env.port }}"
        cmd_options: "-r zap-report.html"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 8. Upload du rapport HTML comme artefact
    - name: Upload ZAP report
      uses: actions/upload-artifact@v4
      with:
        name: owasp-zap-report
        path: zap-report.html
