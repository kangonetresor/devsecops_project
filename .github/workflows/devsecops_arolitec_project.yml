name: OWASP ZAP Dynamic Scan

on:
  push:
  pull_request:

jobs:
  zap-scan:
    runs-on: ubuntu-latest

    steps:
    # 1. Récupérer le code
    - name: Checkout code
      uses: actions/checkout@v3

    # 3. Setup Python si Python détecté
    - name: Set up Python
      if: env.lang == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # 4. Installation des dépendances Python
    - name: Install Python dependencies
      if: env.lang == 'python'
      run: |
        cd Source/Functions/RPSLS.Python.Api
        pip install -r requirements.txt
        pip install azure-functions-core-tools==4.*

    # 5. Lancer Azure Functions en arrière-plan
    - name: Start Azure Function
      if: env.lang == 'python'
      run: |
        cd Source/Functions/RPSLS.Python.Api
        nohup func start --port $port --verbose & 
        sleep 15

    # 6. Lancer le scan OWASP ZAP
    - name: Run OWASP ZAP Scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: "http://localhost:${{ env.port }}"
        cmd_options: "-r zap-report.html"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 7. Upload du rapport HTML comme artefact
    - name: Upload ZAP report
      uses: actions/upload-artifact@v4
      with:
        name: owasp-zap-report
        path: zap-report.html
